package amazon.online_assesment;

import java.util.HashSet;
import java.util.Set;

/**
 * Max of Min Altitudes
 * <p>
 * Given a matrix with r rows and c columns, find the maximum score of a path starting at [0, 0] and ending at
 * [r-1, c-1]. The score of a path is the minimum value in that path. For eg, the score of the path 8 → 4 → 5 → 9 is 4.
 * <p>
 * Don't include the first or final entry. You can only move either down or right at any point in time.
 * <p>
 * Example 1:
 * <p>
 * Input:
 * [[5, 1],
 * [4, 5]]
 * <p>
 * Output: 4
 * Explanation:
 * Possible paths:
 * 5 → 1 → 5 => min value is 1
 * 5 → 4 → 5 => min value is 4
 * Return the max value among minimum values => max(4, 1) = 4.
 * Example 2:
 * <p>
 * Input:
 * [[1, 2, 3]
 * [4, 5, 1]]
 * <p>
 * Output: 4
 * Explanation:
 * Possible paths:
 * 1-> 2 -> 3 -> 1
 * 1-> 2 -> 5 -> 1
 * 1-> 4 -> 5 -> 1
 * So min of all the paths = [2, 2, 4]. Note that we don't include the first and final entry.
 * Return the max of that, so 4.
 */

public class MaxOfMinAltitudes {
  public static void main(String[] args) {
    MaxOfMinAltitudes m = new MaxOfMinAltitudes();
    System.out.println(m.maxOfMinAltitudes(new int[][]{{20, 20, 3}, {20, 3, 20}, {3, 20, 20}}));
    System.out.println(m.maxOfMinAltitudes(new int[][]{{10, 7, 3}, {12, 11, 9}, {1, 2, 8}}));
    System.out.println(m.maxOfMinAltitudes(new int[][]{{5, 7, 6, 8}, {3, 4, 2, 1}, {9, 8, 4, 6}}));
    /*
    10  7   3
    12  11  9
    1   2   8

    {10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2},{10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2},{10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2},{10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2},{10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2},{10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2},{10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2},{10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2},{10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2},{10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2},{10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2},{10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2},{10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2},{10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2,10, 7, 3, 12, 11, 9, 1, 2, 8,5,4,2,6,7,8,4,2,2,6,9,5,3,2,5,7,9,7,5,4,2}
     */
  }

  public int maxOfMinAltitudes(int[][] A) {
    if (A == null || A.length == 0) {
      return 0;
    }

    return findMaxOfMin(A);
  }

//  private void dfs(int[][] A, int i, int j, int min) {
//    if (i >= A.length || j >= A[0].length) {
//      return;
//    }
//
//    if (i == A.length - 1 && j == A[0].length - 1) {
//      max = Math.max(max, min);
//      return;
//    }
//
//    if (i != 0 || j != 0) {
//      min = Math.min(min, A[i][j]);
//    }
//
//    dfs(A, i + 1, j, min);
//    dfs(A, i, j + 1, min);
//  }

  private int findMaxOfMin(int[][] A) {
    for (int i = 0; i < A.length; i++) {
      for (int j = 0; j < A[0].length; j++) {
        if ((i == 0 && j == 0) || (i == 0 && j == 1) || (i == 1 && j == 0)) {
          continue;
        } else if (i == 0) {
          A[i][j] = Math.min(A[i][j], A[i][j - 1]);
        } else if (j == 0) {
          A[i][j] = Math.min(A[i][j], A[i - 1][j]);
        } else if (i == A.length - 1 && j == A[0].length - 1) {
          A[i][j] = Math.max(A[i - 1][j], A[i][j - 1]);
        } else {
          A[i][j] = Math.min(A[i][j], Math.max(A[i - 1][j], A[i][j - 1]));
        }
      }
    }

    return A[A.length - 1][A[0].length - 1];
  }
}
